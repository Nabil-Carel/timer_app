{"version":3,"sources":["components/ActionButton.js","components/Time.js","components/TimerMainButton.js","components/TimerDisplay.js","components/TimerForm.js","api.js","components/Timer.js","components/ToggleableTimerForm.js","components/Loading.js","components/App.js","reportWebVitals.js","index.js"],"names":["ActionButton","onButtonClick","iconComponent","text","id","useState","borderColor","style","setStyle","Icon","hoverOnStyle","hoverOffStyle","title","onConfirm","okText","cancelText","type","onMouseEnter","onMouseLeave","icon","Time","elapsedTime","timerRunning","onTimerStartedOrStopped","runningSince","reset","time","Number","Date","now","toString","elapsed","setElapsed","useEffect","interval","setInterval","clearInterval","formatTimeComponents","value","duration","days","Math","floor","daysms","hours","hoursms","minutes","minutesms","sec","msToTime","TimerMainButton","buttonStyle","margin","color","block","onClick","TimerDisplay","description","onTimerEdit","onTimerStart","onTimerStop","onTimerDelete","setTimerRunning","onTimerReset","className","hoverable","size","antd","width","marginTop","actions","EditOutlined","ReloadOutlined","DeleteOutlined","TimerForm","onTitleChange","onDescriptionChange","onCancelClick","onTimerSubmit","Group","danger","placeholder","marginBottom","onChange","e","handleTitleChange","handleDescriptionChange","baseUrl","updateTimer","timer","fetch","_id","method","mode","headers","Accept","body","JSON","stringify","then","res","console","log","json","catch","err","message","error","deleteTimer","Timer","formClosed","formState","setFormState","timerData","setTimerData","Boolean","setReset","newTimer","deepEqual","updateTimerInDB","success","changeFormState","a","result","handleTimerDelete","ok","object1","object2","keys1","Object","keys","keys2","length","key","val1","val2","areObjects","isObject","object","event","target","handleTitleOrDescriptionUpdate","ToggleableTimerForm","onTimerCreate","formOpened","formStatus","setFormStatus","handleButtonClick","handleTimerSubmit","PlusOutlined","Loading","loading","setLoading","setTimeout","LoadingOutlined","fontSize","App","timers","setTimers","fetchTimers","dividerAndH1Style","updatedTimer","index","findIndex","updatedTimerList","removeTimer","filteredTimers","filter","renderedTimers","map","onTimerUpdate","align","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a72258f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Popconfirm } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport PropTypes from \"prop-types\";\nexport default function ActionButton({\n  onButtonClick,\n  iconComponent,\n  text,\n  id,\n}) {\n  const [style, setStyle] = useState({\n    borderColor: \"transparent\",\n  });\n\n  const Icon = iconComponent;\n\n  //Styles\n  const hoverOnStyle = {\n    borderColor: \"#40a9ff\",\n  };\n\n  const hoverOffStyle = { borderColor: \"transparent\" };\n  //console.log(\"id\", id);\n  return (\n    <Popconfirm\n      title={text}\n      onConfirm={id ? (id) => onButtonClick(id) : onButtonClick}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    >\n      <Button\n        type=\"default\"\n        style={style}\n        //onClick={}\n        onMouseEnter={() => setStyle(hoverOnStyle)}\n        onMouseLeave={() => setStyle(hoverOffStyle)}\n        icon={<Icon />}\n      />\n    </Popconfirm>\n  );\n}\n\nActionButton.propTypes = {\n  onButtonClick: PropTypes.func.isRequired,\n  iconComponent: PropTypes.object.isRequired,\n  id: PropTypes.string,\n  text: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./Time.css\";\nimport PropTypes from \"prop-types\";\nexport default function Time({\n  elapsedTime,\n  timerRunning,\n  onTimerStartedOrStopped,\n  runningSince,\n  reset,\n  //reinitializeReset,\n}) {\n  const [elapsed, setElapsed] = useState(getElapsed);\n\n  useEffect(() => {\n    let interval;\n\n    if (reset) {\n      //reinitializeReset();\n      setElapsed(0);\n    } else {\n      const updateTimer = () => {\n        if (timerRunning) {\n          //console.log(\"current val\", Number(elapsed) + 1000, \"elapsed\", elapsed);\n          interval = setInterval(\n            () => setElapsed((Number(elapsed) + 1000).toString()),\n            1000\n          );\n        }\n      };\n\n      //console.log(updateTimer);\n      updateTimer();\n    }\n\n    return function cleanup() {\n      clearInterval(interval);\n    };\n  }, [elapsed, timerRunning, reset]);\n\n  useEffect(() => {\n    onTimerStartedOrStopped(elapsed);\n  }, [timerRunning]);\n\n  const formatTimeComponents = (value) => (value <= 9 ? `0${value}` : value);\n\n  const msToTime = (duration) => {\n    //let milliseconds = parseInt((duration % 1000) / 100),\n    //let seconds = Math.floor((Number(duration) / 1000) % 60),\n    //minutes = Math.floor((Number(duration) / (1000 * 60)) % 60),\n    //hours = Math.floor((Number(duration) / (1000 * 60 * 60)) % 24);\n    /* hours = Math.floor(Number(duration) / (1000 * 60 * 60));\n\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n    return hours + \":\" + minutes + \":\" + seconds;*/\n\n    const days = Math.floor(duration / (24 * 60 * 60 * 1000));\n    const daysms = duration % (24 * 60 * 60 * 1000);\n    const hours = Math.floor(daysms / (60 * 60 * 1000));\n    const hoursms = duration % (60 * 60 * 1000);\n    const minutes = Math.floor(hoursms / (60 * 1000));\n    const minutesms = duration % (60 * 1000);\n    const sec = Math.floor(minutesms / 1000);\n\n    const formattedDays = formatTimeComponents(days);\n    const formattedHours = formatTimeComponents(hours);\n    const formattedMinutes = formatTimeComponents(minutes);\n    const formattedSeconds = formatTimeComponents(sec);\n    return (\n      formattedDays +\n      \"d \" +\n      formattedHours +\n      \":\" +\n      formattedMinutes +\n      \":\" +\n      formattedSeconds\n    );\n  };\n\n  function getElapsed() {\n    let time;\n    if (reset) {\n      time = 0;\n    } else {\n      time = runningSince\n        ? (\n            Number(Date.now()) -\n            Number(runningSince) +\n            Number(elapsedTime)\n          ).toString()\n        : elapsedTime;\n    }\n    return time;\n  }\n  return <h2 id=\"time\">{msToTime(elapsed)}</h2>;\n}\n\nTime.propTypes = {\n  elapsedTime: PropTypes.string.isRequired,\n  timerRunning: PropTypes.bool.isRequired,\n  onTimerStartedOrStopped: PropTypes.func.isRequired,\n  runningSince: PropTypes.string.isRequired,\n  reset: PropTypes.bool.isRequired,\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport PropTypes from \"prop-types\";\nexport default function TimerMainButton({\n  onButtonClick,\n  timerRunning,\n  reset,\n}) {\n  const buttonStyle = {\n    margin: 0,\n    borderColor: !timerRunning || reset ? \"#40a9ff\" : \"#FF726F\",\n    color: !timerRunning || reset ? \"#40a9ff\" : \"#FF726F\",\n  };\n  return (\n    <Button block style={buttonStyle} onClick={onButtonClick}>\n      {!timerRunning || reset ? \"Start\" : \"Stop\"}\n    </Button>\n  );\n}\nTimerMainButton.propTypes = {\n  onButtonClick: PropTypes.func.isRequired,\n  timerRunning: PropTypes.bool.isRequired,\n  reset: PropTypes.bool.isRequired,\n};\n","import React from \"react\";\nimport \"./TimerDisplay.css\";\nimport { Card } from \"antd\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  ReloadOutlined,\n} from \"@ant-design/icons\";\n\nimport ActionButton from \"./ActionButton\";\nimport Time from \"./Time\";\nimport TimerMainButton from \"./TimerMainButton\";\nimport PropTypes from \"prop-types\";\nexport default function TimerDisplay({\n  title,\n  description,\n  elapsedTime,\n  runningSince,\n  onTimerEdit,\n  onTimerStart,\n  onTimerStop,\n  onTimerDelete,\n  onTimerStartedOrStopped,\n  timerRunning,\n  setTimerRunning,\n  onTimerReset,\n  reset,\n  id,\n}) {\n  //Styles\n  const cardStyle = { width: 300, marginTop: 16, borderColor: \"#dcdcdc\" };\n\n  //const [timerRunning, setTimerRunning] = useState(Boolean(runningSince));\n\n  const deletePopConfirmText = \"Are you sure you want to delete this timer?\";\n  const editPopConfirmText = \"Are you sure you want to edit this timer?\";\n  const resetPopConfirmText = \"Are you sure you want to reset this timer\";\n  const startTimer = () => {\n    //setInterval(updateElapsedTime, 1000);\n    //setElapsed(elapsed);\n    //reinitializeReset();\n    setTimerRunning(true);\n    onTimerStart();\n  };\n  const stopTimer = () => {\n    setTimerRunning(false);\n    onTimerStop();\n  };\n\n  const handleButtonClick = () => (!timerRunning ? startTimer() : stopTimer());\n  return (\n    <div>\n      <Card\n        className=\"Card\"\n        hoverable\n        size=\"small\"\n        antd=\"true\"\n        style={cardStyle}\n        actions={[\n          <TimerMainButton\n            onButtonClick={handleButtonClick}\n            timerRunning={timerRunning}\n            reset={reset}\n            key=\"1\"\n          />,\n        ]}\n      >\n        <h2 id=\"t\">\n          <b>{title}</b>\n        </h2>\n        <h4 id=\"t\" className=\"ant-card-meta-description\">\n          {description}\n        </h4>\n        <Time\n          elapsedTime={elapsedTime}\n          timerRunning={timerRunning}\n          runningSince={runningSince}\n          onTimerStartedOrStopped={onTimerStartedOrStopped}\n          reset={reset}\n        />\n        <div className=\"actionButtonBar\">\n          <ActionButton\n            onButtonClick={onTimerEdit}\n            iconComponent={EditOutlined}\n            text={editPopConfirmText}\n          />\n          <ActionButton\n            onButtonClick={onTimerReset}\n            iconComponent={ReloadOutlined}\n            text={resetPopConfirmText}\n          />\n\n          <ActionButton\n            iconComponent={DeleteOutlined}\n            onButtonClick={onTimerDelete}\n            text={deletePopConfirmText}\n            id={id}\n          />\n        </div>\n      </Card>\n    </div>\n  );\n}\n//TimerDisplay.whyDidYouRender = true;\nTimerDisplay.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  elapsedTime: PropTypes.string.isRequired,\n  runningSince: PropTypes.string.isRequired,\n  onTimerEdit: PropTypes.func.isRequired,\n  onTimerStart: PropTypes.func.isRequired,\n  onTimerStop: PropTypes.func.isRequired,\n  onTimerDelete: PropTypes.func.isRequired,\n  onTimerStartedOrStopped: PropTypes.func.isRequired,\n  timerRunning: PropTypes.bool.isRequired,\n  setTimerRunning: PropTypes.func.isRequired,\n  onTimerReset: PropTypes.func.isRequired,\n  reset: PropTypes.bool.isRequired,\n  id: PropTypes.string,\n};\n","import React from \"react\";\nimport { Card, Input, Button } from \"antd\";\nimport \"./TimerForm.css\";\nimport PropTypes from \"prop-types\";\n\nexport default function TimerForm({\n  onTitleChange,\n  onDescriptionChange,\n  onCancelClick,\n  onTimerSubmit,\n  id,\n  title,\n  description,\n}) {\n  //Styles\n  const cardStyle = { width: 300, marginTop: 16, borderColor: \"#dcdcdc\" };\n  const titleStyle = { marginBottom: 16 };\n  const descriptionStyle = { marginBottom: 0 };\n  const buttonGroupStyle = { width: 280 };\n  /**\n   * Close TimerForm\n   */\n  const handleCancelClick = () => {\n    onCancelClick();\n  };\n\n  const handleTitleChange = (e) => {\n    onTitleChange(e);\n  };\n\n  const handleDescriptionChange = (e) => {\n    onDescriptionChange(e);\n  };\n\n  const handleTimerSubmit = () => {\n    onTimerSubmit();\n  };\n\n  return (\n    <div>\n      <Card\n        className=\"Card\"\n        hoverable\n        size=\"small\"\n        antd=\"true\"\n        style={cardStyle}\n        actions={[\n          <Button.Group style={buttonGroupStyle} key=\"buttonGroup\">\n            <Button\n              type=\"default\"\n              block=\"true\"\n              id=\"button\"\n              onClick={handleTimerSubmit}\n              key=\"create\"\n            >\n              {\n                id\n                  ? \"Update\"\n                  : \"Create\" /*timers don't have ids until they are stored in db*/\n              }\n            </Button>\n\n            <Button\n              type=\"default\"\n              block=\"true\"\n              key=\"cancel\"\n              danger\n              onClick={handleCancelClick}\n            >\n              Cancel\n            </Button>\n          </Button.Group>,\n        ]}\n      >\n        <label>\n          <b>Title</b>\n        </label>\n        <Input\n          placeholder=\"Title\"\n          style={titleStyle}\n          onChange={(e) => handleTitleChange(e)}\n          value={title}\n        />\n        <label>\n          <b>Description</b>\n        </label>\n        <Input\n          placeholder=\"Description\"\n          style={descriptionStyle}\n          onChange={(e) => handleDescriptionChange(e)}\n          value={description}\n        />\n      </Card>\n    </div>\n  );\n}\n\nTimerForm.propTypes = {\n  /**\n   * Handle cancel button Click\n   *\n   */\n  onCancelClick: PropTypes.func.isRequired,\n  onTitleChange: PropTypes.func.isRequired,\n  onDescriptionChange: PropTypes.func.isRequired,\n  onTimerSubmit: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n","import { message } from \"antd\";\nconst baseUrl = \"https://us-central1-timer-app-81306.cloudfunctions.net/app/\";\nexport const getTimers = () =>\n  fetch(baseUrl, { method: \"GET\", mode: \"cors\" }).then((res) => res.json());\n\nexport const createTimer = (timer) =>\n  fetch(`${baseUrl}create`, {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(timer),\n  })\n    .then((res) => res.json())\n    .catch((err) => {\n      message.error(\"Something went wrong. Could not create timer.\");\n      console.log(err.message);\n      return null;\n    });\n\nexport const updateTimer = (timer) =>\n  fetch(`${baseUrl}${timer._id}`, {\n    method: \"PUT\",\n    mode: \"cors\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(timer),\n  })\n    .then((res) => {\n      console.log(\"success\");\n      return res.json();\n    })\n    .catch((err) => {\n      //console.log(\"Error put failed\");\n      message.error(\"Something went wrong. Could not update timer.\");\n      console.log(err.message, timer);\n      return null;\n    });\n\nexport const deleteTimer = (id) =>\n  fetch(`${baseUrl}${id}`, {\n    method: \"DELETE\",\n    mode: \"cors\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n  })\n    .then((res) => res)\n    .catch((err) => {\n      console.log(err.message);\n      message.error(\"Something went wrong. Could not delete timer.\");\n    });\n","import React, { useState, useEffect } from \"react\";\nimport TimerDisplay from \"./TimerDisplay\";\nimport TimerForm from \"./TimerForm\";\nimport PropTypes from \"prop-types\";\nimport { updateTimer, deleteTimer } from \"../api\";\nimport { message } from \"antd\";\n\n/**\n *\n * Stateful component display timer data. FormState is used to display\n * either TimerForm or TimerDisplay\n *\n */\nexport default function Timer({ timer, /*onTimerUpdate,*/ onTimerDelete }) {\n  /* -------------------------------------------------------------------------- */\n  /*                                    Hooks                                   */\n  /* -------------------------------------------------------------------------- */\n  /**\n   * A timer has two states:\n   *  - formClosed == true: TimerDisplay is displayed\n   *  - formClosed == false: TimerForm is displayed\n   */\n  const [formState, setFormState] = useState({ formClosed: true });\n  const [timerData, setTimerData] = useState(timer);\n  const [elapsed, setElapsed] = useState(timerData.elapsedTime);\n  const [timerRunning, setTimerRunning] = useState(\n    Boolean(timerData.runningSince)\n  );\n  const [reset, setReset] = useState(false);\n\n  useEffect(() => {\n    let newTimer;\n\n    if (!timerRunning) {\n      setReset(false);\n    }\n    if (reset) {\n      newTimer = {\n        ...timerData,\n        runningSince: \"\",\n        elapsedTime: \"\",\n      };\n    } else {\n      newTimer = {\n        ...timerData,\n        elapsedTime: timerRunning ? timerData.elapsedTime : elapsed,\n        runningSince: timerRunning\n          ? timerData.runningSince || Date.now().toString()\n          : \"\",\n      };\n    }\n    // console.log(\"nre Yimrt running since\", newTimer.runningSince);\n    if (!deepEqual(timerData, newTimer)) {\n      updateTimerInDB(newTimer).then(() => {\n        if (reset) {\n          message.success(\"Timer reset.\");\n        }\n      });\n    }\n  }, [elapsed, timerRunning, reset]);\n\n  /* -------------------------------- End Hooks ------------------------------- */\n\n  /* -------------------------------------------------------------------------- */\n  /*                                  Functions                                 */\n  /* -------------------------------------------------------------------------- */\n  /**\n   * Change formState to the opposite of it's current value.\n   * * formState is used to display either TimerDisplay or TimerForm depending\n   * * the state value\n   */\n  const changeFormState = () => {\n    setFormState({ formClosed: !formState.formClosed });\n  };\n\n  const updateTimerInDB = async (timer) => {\n    const result = await updateTimer(timer);\n    //console.log(\"update result\", result);\n    if (result) {\n      setTimerData(result);\n      return true;\n    } else {\n      message.error(\"Couldn't update timer.\");\n      message.error(timer.title);\n      return false;\n    }\n  };\n\n  /**\n   */\n  const handleTimerStart = () => {\n    //const newTimer = { ...timerData, runningSince: Date.now().toString() };\n    //setReset(false);\n    setTimerRunning(true);\n    //updateTimerInDB(newTimer);\n  };\n\n  const handleTimerStop = () => {\n    setTimerRunning(false);\n    //updateTimerInDB(newTimer);\n  };\n\n  /**\n   * Update state to store title changes\n   * @param {*} event: key press\n   */\n  const handleTitleChange = (event) => {\n    const newTimer = { _id: timerData._id, title: event.target.value };\n    setTimerData(newTimer);\n    //updateTimerInDB(newTimer);\n  };\n\n  /**\n   * Update state to store description changes\n   * @param {*} event: key press\n   */\n  const handleDescriptionChange = (event) => {\n    const newTimer = {\n      _id: timerData._id,\n      description: event.target.value,\n    };\n    setTimerData(newTimer);\n    //updateTimerInDB(newTimer);\n  };\n  /**\n   * @param  {Object} timer\n   */\n  const handleTitleOrDescriptionUpdate = (timer) => {\n    const result = updateTimerInDB(timer);\n    if (result) {\n      setFormState({ formClosed: !formState.formClosed });\n      message.success(\"Timer sucessfully updated.\");\n    }\n  };\n\n  const handleTimerReset = () => {\n    setReset(true);\n    setTimerRunning(false);\n  };\n\n  const handleTimerDelete = async (id) => {\n    const result = await deleteTimer(id);\n    //console.log(\"result\", result);\n    if (result.ok) {\n      console.log(\"ok\", result.ok);\n      onTimerDelete(id);\n      message.success(\"Timer sucessfully deleted.\");\n    } else {\n      message.error(\"Couldn't delete timer.\");\n    }\n  };\n\n  function deepEqual(object1, object2) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n      const areObjects = isObject(val1) && isObject(val2);\n      if (\n        (areObjects && !deepEqual(val1, val2)) ||\n        (!areObjects && val1 !== val2)\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function isObject(object) {\n    return object != null && typeof object === \"object\";\n  }\n  /* ------------------------------ End Functions ----------------------------- */\n\n  return (\n    <div>\n      {formState.formClosed ? (\n        <TimerDisplay\n          title={timerData.title}\n          description={timerData.description}\n          id={timerData._id}\n          elapsedTime={timerData.elapsedTime}\n          runningSince={timerData.runningSince}\n          timerRunning={timerRunning}\n          setTimerRunning={setTimerRunning}\n          onTimerEdit={changeFormState}\n          onTimerStart={handleTimerStart}\n          onTimerStop={handleTimerStop}\n          onTimerDelete={() => handleTimerDelete(timerData._id)}\n          onTimerReset={handleTimerReset}\n          onTimerStartedOrStopped={setElapsed}\n          reset={reset}\n        />\n      ) : (\n        <TimerForm\n          onTitleChange={handleTitleChange}\n          onDescriptionChange={handleDescriptionChange}\n          onCancelClick={changeFormState}\n          onTimerSubmit={() => handleTitleOrDescriptionUpdate(timerData)}\n          //onTimerSubmit={handleTimerSubmit}//add put handler\n          id={timerData._id}\n          title={timerData.title}\n          description={timerData.description}\n        />\n      )}\n    </div>\n  );\n}\n\nTimer.propTypes = {\n  //Timer data to display\n  timer: PropTypes.object.isRequired,\n  onTimerUpdate: PropTypes.func.isRequired,\n  onTimerDelete: PropTypes.func.isRequired,\n};\n","import React, { useState } from \"react\";\nimport TimerForm from \"./TimerForm\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport { createTimer } from \"../api\";\nimport PropTypes from \"prop-types\";\n/**\n * Component used to add a new timer. By default, a button is displayed.\n *  Once that button is clicked, a TimerForm is displayed instead.\n */\nexport default function ToggleableTimerForm({ onTimerCreate }) {\n  //Form Status: formOpened == true => TimerForm displayed, else Button is displayed.\n\n  //Styles\n  const buttonStyle = { marginTop: 10 };\n\n  const [formStatus, setFormStatus] = useState({ formOpened: false });\n\n  const [timerData, setTimerData] = useState({\n    title: \"\", //Timer Title\n    description: \"\", //Timer Description\n    runningSince: \"\", //When timer was created; equals to 0 if timer stopped\n    elapsedTime: \"\", //Elapsed time since timer creation\n  });\n\n  /**\n   * Update state to store title changes\n   * @param {*} event: key press\n   */\n  const handleTitleChange = (event) => {\n    const newTimer = { ...timerData, title: event.target.value };\n    setTimerData(newTimer);\n  };\n\n  /**\n   * Update state to store description changes\n   * @param {*} event: key press\n   */\n  const handleDescriptionChange = (event) => {\n    setTimerData({\n      ...timerData,\n      description: event.target.value,\n    });\n  };\n\n  /**\n   * Change formStatus to it's opposite value\n   */\n  const handleButtonClick = () => {\n    setFormStatus({ formOpened: !formStatus.formOpened });\n  };\n\n  const handleTimerSubmit = async () => {\n    console.log(\"timer\", timerData);\n    const result = await createTimer(timerData);\n\n    if (result) {\n      onTimerCreate(result);\n    }\n    //onTimerCreate ? onTimerCreate(timer) : onTimerUpdate(timer);\n\n    handleButtonClick();\n  };\n\n  return (\n    <div>\n      {formStatus.formOpened ? (\n        <TimerForm\n          onTitleChange={handleTitleChange}\n          onDescriptionChange={handleDescriptionChange}\n          onCancelClick={handleButtonClick}\n          onTimerSubmit={handleTimerSubmit}\n          id={timerData._id || \"\"}\n          title={timerData.title}\n          description={timerData.description}\n        />\n      ) : (\n        <Button\n          type=\"default\"\n          style={buttonStyle}\n          onClick={handleButtonClick}\n          icon={<PlusOutlined className=\"button\" />}\n        />\n      )}\n    </div>\n  );\n}\nToggleableTimerForm.propTypes = {\n  onTimerCreate: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n","import React, { useEffect } from \"react\";\nimport \"./Loading.css\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport PropTypes from \"prop-types\";\nexport default function Loading({ loading, setLoading }) {\n  useEffect(() => setTimeout(() => setLoading(false), 10000), []);\n\n  return (\n    <div>\n      {loading ? (\n        <LoadingOutlined\n          style={{ fontSize: \"5vw\" }}\n          className=\"center-screen\"\n        />\n      ) : (\n        <h4>Nothing to display</h4>\n      )}\n    </div>\n  );\n}\n\nLoading.propTypes = {\n  setLoading: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Timer from \"./Timer\";\nimport ToggleableTimerForm from \"./ToggleableTimerForm\";\nimport Loading from \"./Loading\";\nimport { Col, Divider } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { getTimers } from \"../api\";\n\nfunction App() {\n  const [timers, setTimers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchTimers = async () => {\n      const result = await getTimers();\n      setTimers(result);\n      console.log(result);\n    };\n    fetchTimers();\n  }, []);\n\n  const dividerAndH1Style = { margin: 0 };\n  const newTimer = (timer) => {\n    setTimers([...timers, timer]);\n  };\n\n  const updateTimer = (updatedTimer) => {\n    const index = timers.findIndex((timer) => timer.id === updatedTimer.id);\n\n    const updatedTimerList = [...timers];\n    //console.log(\"before\", updatedTimerList);\n    updatedTimerList[index] = updatedTimer;\n    //console.log(\"after\", updatedTimerList);\n    setTimers(updatedTimerList);\n  };\n\n  const removeTimer = (id) => {\n    console.log(\"removed\");\n    const filteredTimers = timers.filter((timer) => id !== timer._id);\n    console.log(\"filtered timers\", filteredTimers);\n    setTimers(filteredTimers);\n  };\n\n  const renderedTimers =\n    timers.length > 0 ? (\n      timers.map((timerData) => (\n        <Timer\n          timer={timerData}\n          key={timerData._id}\n          onTimerUpdate={updateTimer}\n          onTimerDelete={removeTimer}\n        />\n      ))\n    ) : (\n      <Loading loading={loading} setLoading={setLoading} />\n    );\n  return (\n    <div className=\"dashboard\">\n      <Col align=\"center\">\n        <h1 style={dividerAndH1Style}>Timers</h1>\n        <Divider style={dividerAndH1Style} />\n        {renderedTimers}\n        <ToggleableTimerForm onTimerCreate={newTimer} />\n      </Col>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//import \"./wdyr\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n/*if (!process.env.NODE_ENV === \"development\") {\n  const whyDidYouRender = require(\"@welldone-software/why-did-you-render\");\n  whyDidYouRender(React, {\n    trackAllPureComponents: true,*/\n//include: [/^.*/],\n/* });\n}*/\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}